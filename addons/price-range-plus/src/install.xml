<?xml version="1.0" encoding="utf-8"?>

<!--
This file is part of "Live Product+" project and subject to the terms
and conditions defined in file "LICENSE.txt", which is part of this source
code package and also available on the project page: https://git.io/JJv5J.
-->

<modification>
	<name>[underr] Live Product+ &lt; Price Range+</name>
	<code>live-product--price-range-plus</code>
	<version>1.2.0</version>
	<author>Andrii Burkatskyi aka underr</author>
	<link>https://git.io/JfjUj</link>

	<file path="catalog/controller/extension/module/live_product.php" error="log">
		<operation error="log">
			<search><![CDATA[$json['success'] = true;]]></search>
			<add position="before"><![CDATA[			/// << Live Product+ < Price Range+
			if ($this->config->get('module_price_range_status')) {
				$this->load->model('extension/module/price_range');
				$price_range_settings = $this->model_extension_module_price_range->getSettings();

				if ($price_range_settings['status'] && !$this->hasSelected($post_options)) {
					$this->load->model('extension/module/price_range');

					if ($config_tax) {
						$extax_range = $this->model_extension_module_price_range->calculate((float)$product_info['price'], $product_options);

						if ($this->product_total) {
							$extax_range['min'] *= $quantity;
							$extax_range['max'] *= $quantity;
						}

						$price_range = array(
							'min' => $this->tax->calculate($extax_range['min'], $product_info['tax_class_id'], $config_tax),
							'max' => $this->tax->calculate($extax_range['max'], $product_info['tax_class_id'], $config_tax),
						);

						$json['product']['price'] = $this->model_extension_module_price_range->format($price_range);

						if ((float)$product_info['special']) {
							$extax_range = $this->model_extension_module_price_range->calculate(
								(float)$product_info['special'],
								$product_options,
								!empty($this->is_flexible_options) ? $product_info['special'] / $product_info['price'] : 1
							);

							if ($this->product_total) {
								$extax_range['min'] *= $quantity;
								$extax_range['max'] *= $quantity;
							}

							$special_range = array(
								'min' => $this->tax->calculate($extax_range['min'], $product_info['tax_class_id'], $config_tax),
								'max' => $this->tax->calculate($extax_range['max'], $product_info['tax_class_id'], $config_tax),
							);

							$json['product']['special'] = $this->model_extension_module_price_range->format($special_range);
						}

						if (!$this->hide_extax) {
							$json['product']['extax'] = $this->model_extension_module_price_range->format($extax_range);
						}

						if ($discounts && !(float)$product_info['special']) {
							$json['product']['discounts'] = array();

							foreach ($discounts as $discount) {
								if ($quantity >= $discount['quantity']) {
									$extax_range = $this->model_extension_module_price_range->calculate((float)$discount['price'], $product_options);

									if ($this->product_total) {
										$extax_range['min'] *= $quantity;
										$extax_range['max'] *= $quantity;
									}

									$price_range = array(
										'min' => $this->tax->calculate($extax_range['min'], $product_info['tax_class_id'], $config_tax),
										'max' => $this->tax->calculate($extax_range['max'], $product_info['tax_class_id'], $config_tax),
									);

									$json['product']['price'] = $this->model_extension_module_price_range->format($price_range);
								}

								if (!$this->hide_extax) {
									$json['product']['extax'] = $this->model_extension_module_price_range->format($extax_range);
								}

								$discount_range = $this->model_extension_module_price_range->calculate(
									$discount['price'], $product_options, !empty($this->is_flexible_options) ? $discount['price'] / $product_info['price'] : 1
								);

								$discount_range['min'] = $this->tax->calculate($discount_range['min'], $product_info['tax_class_id'], $config_tax);
								$discount_range['max'] = $this->tax->calculate($discount_range['max'], $product_info['tax_class_id'], $config_tax);

								$json['product']['discounts'][$discount['quantity']] = $this->model_extension_module_price_range->format($discount_range);
							}
						}
					} else {
						$price_range = $this->model_extension_module_price_range->calculate(
							$this->product_total ? (float)$product_info['price'] * $quantity : (float)$product_info['price'],
							$product_options
						);

						$json['product']['price'] = $this->model_extension_module_price_range->format($price_range);

						if ((float)$product_info['special']) {
							$special_range = $this->model_extension_module_price_range->calculate(
								$this->product_total ? (float)$product_info['special'] * $quantity : (float)$product_info['special'],
								$product_options,
								!empty($this->is_flexible_options) ? $product_info['special'] / $product_info['price'] : 1
							);

							$json['product']['special'] = $this->model_extension_module_price_range->format($special_range);
						}

						if ($discounts && !(float)$product_info['special']) {
							$json['product']['discounts'] = array();

							foreach ($discounts as $discount) {
								if ($quantity >= $discount['quantity']) {
									$price_range = $this->model_extension_module_price_range->calculate((float)$discount['price'], $product_options);

									if ($this->product_total) {
										$price_range['min'] = $price_range['min'] * $quantity;
										$price_range['max'] = $price_range['max'] * $quantity;
									}

									$json['product']['price'] = $this->model_extension_module_price_range->format($price_range);
								}

								$discount_range = $this->model_extension_module_price_range->calculate(
									$discount['price'], $product_options, !empty($this->is_flexible_options) ? $discount['price'] / $product_info['price'] : 1
								);

								$json['product']['discounts'][$discount['quantity']] = $this->model_extension_module_price_range->format($discount_range);
							}
						}
					}
				}
			}
			/// Live Product+ < Price Range+ >>]]>
			</add>
		</operation>
	</file>
</modification>
